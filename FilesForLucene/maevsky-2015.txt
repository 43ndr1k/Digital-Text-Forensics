Маєвський Д.А. Опубліковано в журналі   Електротехнічні та комп’ютерні системи   № 18 (94), 2015  49 – 54 
Програмна інженерія 
49 
 
УДК 621.391.7.001 
Д. А. Маєвский, д-р техн. наук, 
Ю. П. Чербаджи 
СИСТЕМА МЕТРИК ДЛЯ АТРИБУЦІЇ ПОЧАТКОВОГО КОДУ 
ПРОГРАМНИХ ПРОДУКТІВ 
Анотація. Розроблено систему метрик ідентифікації авторства програмних продуктів та інформаційну 
систему на її основі. Виконано дослідження точності атрибуції на підставі даних про наявні проекти. Завдяки 
інформаційній системі можливо формування бази даних профілів, яка допомагає контролювати можливі пра-
вопорушення недобросовісних авторів. 
Ключові слова: атрибуція, початковий код, встановлення авторства, інформаційні системи, 
комп’ютерна безпека 
D. А. Maevsky, ScD., 
J. P. Cherbadzhy  
SYSTEM OF METRICS FOR ATTRIBUTION OF SOURCE CODE OF 
SOFTWARE PRODUCTS 
Abstract. The system of metrics of authorship identification of software and information system based on it were 
created. The research established the accuracy of the algorithm based on the available projects. Thanks information 
system database of profiles can be released, which helps to control possible violations unscrupulous authors.  
Keywords: attribution, source code, establishment of authorship, information systems, computer security 
Д. А. Маевский, д-р техн. наук, 
Ю. П. Чербаджи 
СИСТЕМА МЕТРИК ДЛЯ АТРИБУЦИИ ИСХОДНОГО КОДА 
ПРОГРАММНЫХ ПРОДУКТОВ 
Аннотация. Разработана система метрик идентификации авторства программных продуктов и ин-
формационную систему на ее основе. Выполнены исследования точности атрибуции на основе данных об име-
ющихся проектах. Благодаря информационной системе возможно формирование базы данных профилей, ко-
торая помогает контролировать возможные правонарушения недобросовестных авторов. 
Ключевые слова: атрибуция, исходный код, установление авторства, информационные системы, компь-
ютерная безопасность 
 
Вступ 
За останні роки значно зросли загрози 
несанкціонованого шкідливого впливу на 
інформаційні та керуючі комп’ютерні систе-
ми. Втрата інформації через дію 
комп’ютерного вірусу – це сьогодні, мабуть, 
найменше зло. Але комп’ютерні віруси сьо-
годні не тільки видаляють інформацію. Вони 
інформацію крадуть, можуть втручатися в 
роботу інформаційних систем критичного 
застосування й налаштовувати її на шкідливі 
дії. Існує багато методів пасивного захисту 
від вірусів та шкідливих програм – антивіру-
сні програми, файрволи та інше. Але активна 
протидія зловмисникам, яка полягає в їх ви-
явленні та нейтралізації сьогодні практично 
не використовується. На перешкоді цього 
стають труднощі в ідентифікації автора шкі-
дливого програмного коду – атрибуції. 
 
© Маєвський Д.А., Чербаджи Ю.П., 2015 
 
Теоретично, атрибуція програмних продук-
тів має відбуватись або за її двійковим кодом 
або за початковим кодом (якщо він є відо-
мим). 
Перша задача – атрибуція за двійковим 
кодом на сьогодні не розв’язана. Більш того, 
навіть не вироблено шляхів її розв’язання. 
Друга задача – атрибуція за початковим 
кодом значно легша і тому в цьому напрямі 
вже досягнуто певних результатів. Однак, її 
розв’язання є ще далеким від досконалості.  
Всі методи атрибуції за початковим кодом 
можна умовно поділити на такі категорії:  
– методи, що засновані на кластеризації 
(метод XPlag [1]; метод, заснований на лока-
льному вирівнюванні [2]; метод SCAP за до-
помогою N-грамм на байтовому рівні [3, 4]); 
– метричні методи, що використовують 
спеціальні метрики (метрики Холстеда [5], 
метод Plague [6]; метод який враховує особ-
Маєвський Д.А. Опубліковано в журналі   Електротехнічні та комп’ютерні системи   № 18 (94), 2015  49 – 54 
Програмна інженерія 
50 
 
ливості мови програмування С [7]; метод 
IDENTIFIED [8] та отримання відбитків про-
грами Java [9]). 
Підходи більшості методів, заснованих 
на кластерізації, перейшли з природних мов. 
Інші методи були створені та використову-
ються для виявлення авторства лише у шту-
чних мовах, якими є мови програмування.  
Методи визначення авторства текстів на 
природних мовах почали розвиватися з три-
дцятих років минулого сторіччя і на даний 
час вважаються добре дослідженими. Части-
на з них перейшла до встановлення авторст-
ва штучних мов. Прикладом є метод N-грам, 
який використовується у більшості підходів. 
Саме ці методи можна віднести до методів, 
заснованих на кластеризації. Одним з таких 
методів є метод, у якому проводяться експе-
рименти за допомогою підходу SCAP (про-
філь автора початкового коду), який полягає 
у використанні N-грам [3; 4]. Однією з пере-
ваг такого методу є те, що він не залежить 
від мови, оскільки заснований на інформації 
низького рівня. В результаті, він може бути 
застосований без будь-яких додаткових змін 
для наборів даних, де програми написано на 
C++, Java, Perl і т.д. Більш того, він не вима-
гає численних навчальних прикладів від ко-
жного учасника, оскільки ґрунтується на 
одному профілі від одного автора. Чим бі-
льше програм початкового коду доступно 
для кожного автора, тим більшу довжину 
профілю можна вибрати і тим надійніше 
профіль автора. Недоліком цього методу є 
те, що він суб’єктивний і потенційно упере-
джений через вибір розміру N-грам і довжи-
ни профілю. Метод SCAP напівавтоматич-
ний і тому відкритий для суб'єктивних мані-
пуляцій. Знаходження N-грам та їх позиціо-
нування повністю автоматизоване, але вибір 
розміру N-грам і довжини профілю є відкри-
тими для суб’єктивних маніпуляцій. 
Для визначення авторства текстів на 
штучних мовах найчастіше використовують-
ся метричні методи, які в більшості випадків 
розробляються та застосовуються тільки для 
певної мови програмування.  
Усі відомі метричні методи різняться 
тільки кількістю та змістом показників, які 
використовуються в них для формування 
метрики. Наприклад, у одного з перших ме-
тодів атрибуції програмних продуктів, що 
використовує метрики Холстеда [5], таких 
показників лише 16. Іншим метричним ме-
тодом є метод отримання «відбитків» про-
грами. Ці «відбитки» розраховуються тільки 
для програм, написаних на Java [9]. При 
створенні цей метод використовував метрику 
з 56 показників, але пізніше, за результатами 
випробувань, їх кількість було скорочено до 
48. Точність атрибуції методу «відбитків» 
досить невелика – вона становить лише бли-
зько 62 відсотків. 
Окрім того, що метричні методи не за-
безпечують достатньої точності атрибуції, 
вони є залежними від мови програмування. 
Налаштувавши одного разу інформаційну 
систему на певну мову програмування, в по-
дальшому її можна використовувати для ро-
зрахунку метрик тільки для цієї мови. Подо-
лання перелічених недоліків та створення 
незалежної від мови програмування метрики 
й визначає мету даної роботи. 
Розробка мультимовної метрики для 
атрибуції програмних продуктів 
Основним  підходом до створення муль-
тимовної метрики є вибір та включення до неї 
таких показників, які є притаманними усім 
сучасним мовам програмування. Для аналізу 
було обрано декілька популярних мов програ-
мування: Java, Java Script, C# та C++. Вони є 
одними з найбільш використовуваних програ-
містами мов. Початкові коди програмних про-
дуктів є підставою для атрибуції. 
Для створення метрики було обрано такі 
основні категорії показників: роздільники, 
знаки операцій, ключові слова, пропуски 
перед та після знаків операцій, власні імена 
ідентифікаторів, які вживає програміст. 
Розглянемо більш детально кожну кате-
горію. 
1. Роздільники. Дана категорія містить 
10 метрик, які показують частоту і особливо-
сті використання програмістом роздільників. 
У багатьох мовах програмування такі розді-
льники, як пробіл, знак табуляції або перехід 
на новий рядок не є обов'язковими. Однак 
саме використання роздільників формує «зо-
внішній вигляд» лістингу програми і відо-
бражає усталені і важко змінювані особливо-
Маєвський Д.А. Опубліковано в журналі   Електротехнічні та комп’ютерні системи   № 18 (94), 2015  49 – 54 
Програмна інженерія 
51 
 
сті почерку програміста. Ця група показни-
ків показує частоту використання програміс-
том окремих роздільників. 
2. Знаки операцій. Категорія вміщує по-
казники, що включають знаки операцій в 
найбільш часто використовуваних мовах 
програмування та їх можливі варіації, на-
приклад x = x + 1  або еквівалентні варіанти 
типу x++ та x += 1. Як і у випадку з розділь-
никами, розраховується частота використан-
ня тих чи інших знаків операцій. 
3. Ключові слова. Дана категорія вклю-
чає в себе найбільшу кількість показників за 
кількістю ключових слів у різних мовах про-
грамування. Розраховується частота викори-
стання різних ключових слів програмістом. 
Для подолання залежності цієї групи показ-
ників використано заздалегідь підготовлені 
словники ключових слів кожної мови. Кіль-
кість словників та їх склад можуть змінюва-
тись, що дозволяє робити легкий перехід до 
іншої мови програмування. За допомогою 
даної групи можна виявити службові слова, 
які найчастіше використовує програміст. 
Так, наприклад, існують взаємозамінні клю-
чові слова і складені з їх допомогою опера-
тори, використання яких не змінює логіку 
роботи програми (оператори if/else, напри-
клад, можуть замінюватися на switch/case 
замість оператору циклу for завжди може 
стояти while, та інше). Це відкриває можли-
вості відслідковування особливостей вико-
ристання окремими програмістами ключових 
слів і операторів. 
4.  Роздільники до і після знаків опера-
цій. Дана категорія містить 4 показники, які 
характеризують вживання необов'язкового 
обрамлення знаків операцій пробілами. Роз-
раховується частота використання розділь-
ників до і після кожного знака операцій. Ка-
тегорія показує використання розробником 
так званого «гарного» стилю програмування. 
5. Ідентифікатори. У дану категорію 
входять метрики, що показують середню до-
вжину використовуваних програмістом іден-
тифікаторів глобальних і локальних змінних, 
назв класів та методів. Враховуються також 
деякі стилістичні особливості використання 
програмістом слів для назв змінних, напри-
клад, чи вживає програміст російсь-
кі/українські назви, написані англійськими 
літерами чи ні, чи використовує скорочення 
повних назв і так далі. До цієї категорію вхо-
дять деякі структурні показники, наприклад, 
середня кількість глобальних змінних у класі. 
Для того, щоб позбутися залежності по-
казників від довжини програмного коду за-
пропоновано використовувати відносне зна-
чення кожного показника. Це дає можливість 
зіставити відповідні величини для різних 
програмних продуктів.  
На початку розрахунку метрик визнача-
ється абсолютне значення кожного з показ-
ників, а потім  обчислюється їх відносне зна-
чення. 
Для того, щоб визначити, до якого авто-
ра відноситься невідомий програмний про-
ект, необхідно виявити значення характерис-
тик, що притаманні даному автору. Сукуп-
ність цих характеристик утворює так званий 
«профіль автору». 
Можна сказати, що профіль автору від-
повідає поточному стану його стилю програ-
мування. Як показує досвід авторів, стиль 
програмування закладається вже в перші роки 
професійної діяльності програміста і згодом 
практично не змінюється.  
Формування профілю автора складається 
з трьох етапів. 
Етап 1. Збираються всі програмні прое-
кти, про які достовірно відомо, що їх створив 
даний автор. 
Етап 2. Для кожного з відібраних прое-
ктів розраховуються абсолютні та відносні 
значення показників метрики. 
Етап 3. Розраховані відносні значення 
показників метрик всіх програмних проектів 
усереднюється. Отримані середні значення 
показників утворюють профіль автора. 
Розробка інформаційної системи 
атрибуції програмних продуктів 
На підставі описаної мультимовної метри-
ки створено інформаційну систему для атри-
буції програмних продуктів. Вона складається 
з таких підсистем (рис. 1): підсистеми ство-
рення та модифікації профілю авторів та влас-
не підсистеми атрибуції. Вхідними даними для 
підсистеми створення та модифікації профілю 
авторів є програмні проекти, авторство яких 
достеменно відомо. 
Маєвський Д.А. Опубліковано в журналі   Електротехнічні та комп’ютерні системи   № 18 (94), 2015  49 – 54 
Програмна інженерія 
52 
 
 
 
Рис. 1. Підсистеми інформаційної системи 
 
Після успішної атрибуції профіль автора 
може бути доповнено даними, отриманими з 
підсистеми атрибуції На вхід підсистеми 
атрибуції поступає початковий код дослі-
джуваної підсистеми. програмні проекти 
невідомих авторів. До підсистеми створення 
профілю авторів входять п’ять модулів: мо-
дуль вибору мови програмування, модуль 
обчислення абсолютних значень метрик, мо-
дуль обчислення відносних значень метрик, 
візуалізація профілю автора, запис інформа-
ції з профілю автора. Друга підсистема 
включає в себе чотири модулі – це модуль 
вибору мови програмування, модуль обчис-
лення абсолютних значень метрик, модуль 
обчислення відносних значень метрик, запис 
інформації з програмного проекту. 
Як видно, майже всі модулі у обох час-
тинах схожі, адже атрибуція виконується на 
підставі порівняння профілю початкового 
коду досліджуваної програми з профілем 
програм відомих авторів. Тому усі ці модулі 
є спільними для обох підсистем.  
В модулі прийняття рішень, який вхо-
дить до складу підсистеми атрибуції, обчис-
люються значення відхилень профілю проек-
ту від профілів авторів по кожному з показ-
ників окремо. На підставі статистичного 
аналізу цих відхилень обирається найбільш 
ймовірний автор. Основні етапи роботи ін-
формаційної системи атрибуції представлено 
на рис. 2. 
Результати верифікації 
Для перевірки коректності роботи роз-
робленої системи було обрано 154 програм-
них проектів написаних мовою Java та 51 
проект на С++ тринадцяти відомих авторів. 
В контрольну групу для формування профі-
лю авторів було відібрано від 35 до 50 відсо-
тків проектів кожного автора. Решта проек-
тів склала групу для виявлення авторства 
згідно з описаною вище методикою. Резуль-
тати співставлення показали в середньому 
85% точність атрибуції незалежно від мови 
програмування. Цей результат майже на 20 
відсотків перевищує результати відомих ме-
тодів атрибуції. 
Маєвський Д.А. Опубліковано в журналі   Електротехнічні та комп’ютерні системи   № 18 (94), 2015  49 – 54 
Програмна інженерія 
53 
 
 
 
Рис. 2. Вікна інформаційої системи 
 
Висновки 
Запропонована в роботі мультимовна 
метрика дозволяє виконувати атрибуцію 
програмних продуктів на підставі їх почат-
кового коду. За рахунок оптимального вибо-
ру набору значущих показників метрики то-
чність атрибуції підвищено на 15 % у порів-
нянні з відомими результатами  
Напрямками подальшої роботи повинні 
стати: 
− наповнення бази даних системи про-
філями авторів на підставі розроблених ними 
програмних продуктів; 
− розробка нових, більш точних мето-
дик статистичного аналізу розбіжностей при 
порівнянні профілів. Цей напрямок повинен 
ще більше підвищити точність атрибуції. 
 
Список використаної літератури 
(References) 
 
1. Arwin C., and Tahaghoghi S.M.M., 
(2006), Plagiarism Detection across 
Programming Languages [Electronic Resource], 
ACSC '06 The 29th Australasian Computer 
Science Conference, Vol. 48, pp.277 – 286, url: 
http://citeseerx.ist.psu.edu/viewdoc/download?d
oi=10.1.1.60.1199 &rep=rep1&type=pdf. 
2. Burrows S., Tahaghoghi S.M.M., and 
Zobel J., (2007), Efficient plagiarism detection 
for large code repositories [Electronic Re-
source], SOFTWARE—PRACTICE AND 
EXPERIENCE, Vol. 37, pp.151 – 175, url:  
http://citeseerx.ist.psu.edu/viewdoc/download?d
oi=10.1.1.68.7103&rep=rep1&type=pdf. 
3. Frantzeskou G., Frantzeskou G., Gritzalis 
S., and Macdonell S.G., (2004), Source Code 
Authorship Analysis for supporting the 
Cybercrime Investigation Process, International 
Conference on  Telecommunications Net-
works, Setúbal, pp. 85 – 92. 
4.  Frantzeskou G., MacDonell S.G, 
Stamatatos E., Georgiou S., and Gritzalis S., 
(2011), The Significance of User-defined 
Identifiers in Java Source code Authorship 
Identification, International Journal of 
Computer Systems Science and Engineering, 
 Samos, Greece, pp.139 – 148. 
5. Berghel H.L., and Sallach D.L., (1984), 
Measurements of Program Similarity in Identical 
Маєвський Д.А. Опубліковано в журналі   Електротехнічні та комп’ютерні системи   № 18 (94), 2015  49 – 54 
Програмна інженерія 
54 
 
Task Environments [Electronic Resource], ACM 
SIGPLAN Notices, Vol. 19, No. 8, pp. 65 – 76, 
url:http://ulgtcsp.berghel.com/publications/measp
rogsim/measprogsim.pdf. 
6. Whale G., (1990), Software Metrics and 
Plagiarism Detection [Electronic Resource], 
Journal of Systems and Software, Vol. 13, 
pp.131 – 138, url : 
http://citeseerx.ist.psu.edu/viewdoc/download?d
oi=10.1.1.95.5047&rep=rep1&type =pdf. 
7. Krsul I., and Spafford E.H., (1995), 
Authorship Analysis: Identifying The Author of 
a Program [Electronic Resource],  Proceedings 
of the 18th National Information Systems 
Security Conference, pp. 514 – 525, url:  
http://www.krsul. org/ivan/ articles/krsul-
authorship_analysis_nissc.pdf. 
8. Gray A., Sallis P., and MacDonell S.G., 
(1998), IDENTIFIED (Integrated Dictionary-
based Extraction of Non-language-dependent 
Token Information for Forensic Identification, 
Examination, and Discrimination): A 
Dictionary-based System for Extracting Source 
Code Metrics for Software Forencis [Electronic 
Resource], The 18th National Information 
Systems Security Conference, pp. 252 – 259, url: 
http://www.academia.edu/2669584/ 
IDENTIFIED_Integrated_Dictio-nary. 
9. Ding H., and Samadzadeh M.H., (2004), 
Extraction of Java Program Fingerprints for 
Software Authorship Identification [Electronic 
Resource], The Journal of Systems and 
Software, Vol. 72, No. 1, pp. 49 – 57, url: 
http://www.sciencedirect.com/science/article/pii
/S0164121203000499. 
 
Отримано 27.03.2015 
 
 
 
Маєвський  
Дмитро Андрійович, 
д-р техн. наук, проф., 
зав. каф. Теоретичних ос-
нов та загальної електроте-
хніки Одеського політехн. 
у-ту, 
пр-т Шевченко, 1,  
тел. (048) 734-84-54. 
E-mail:  
dmiry.a.maevsky@gmail.com 
 
 
Чербаджи 
Юлія Павлівна, магістр з 
інформаційних управляю-
чих систем та технологій 
Одеського політехн. у-ту, 
тел. (093) 048-35-60. 
E-mail: 
jcherbadzhy@gmail.com 
 
