Account Reachability: A Measure of Privacy Risk for
Exposure of a User’s Multiple SNS Accounts
Ayano YOSHIKUNI
Dept. of Computer Science, Master’s Program,
Ochanomizu University
2-1-1 Otsuka, Bunkyo-ku
Tokyo 112-8610, Japan
yoshikuni.ayano@is.ocha.ac.jp
Chiemi WATANABE
Faculty of Engineering, Information and
Systems, Tsukuba University
1-1-1 Tennoudai, Tsukuba
Ibaraki 305-0006, Japan
chiemi@cs.tsukuba.ac.jp
ABSTRACT
With the increased worldwide popularity of social networking ser-
vices ( SNSs ), the leakage of a user’s private information is be-
coming a serious problem. An increased number of users now
have multiple accounts on various social networks and they tend to
use each account to write different user experiments. Aggregating
information from different accounts leads to the unintended leak-
age of personal information. Therefore, we argue that SNS users
should be vigilant in protecting the relationship between multiple
accounts.
In this paper, we propose the use of Account Reachability, a mea-
sure of privacy risk which demonstrates the possibility of a stranger
finding a user’s private account based on information in their pub-
lic account. In addition, we present ARChecker, a tool to calculate
the value of account reachability. ARChecker also provides ad-
vice on how to modify the user’s profiles and messages to decrease
the privacy risk. By checking the privacy measure and modifying
the profiles and messages of their SNS accounts, users can protect
their multiple accounts from the risk of an unintended leakage of
personal information.
Categories and Subject Descriptors
K.4.1 [Computers and Society]: Public Policy Issues Privacy
General Terms
MEASUREMENT
Keywords
Social networking service, Privacy, Web
1. INTRODUCTION
As online Social Networking Services ( SNSs ) have become
popular, the number of SNS users has increased. As of this writing,
Facebook announced it had 1.11 billion active accounts and Twitter
had over five hundred million users. SNSs have become essential
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
iiWAS 2013, Vienna, Austria
Copyright 2013 ACM 978-1-4503-2113-6/13/12 ...$15.00.
tools in our everyday life. We share our daily experiences with
our friends on online SNSs by writing short messages, uploading
photos and movies, etc.
However, most people are not concerned with other users’ per-
sonal information. Even if a user reveals their home location, it is
unlikely to trigger a dangerous incident, such as a stranger appear-
ing at the front door. That said, it is important for users to bear in
mind that they may easily become a victim of a ciberstalker over a
trivial matter. Users should therefore pay careful attention to limit
the information revealed to other users to avoid becoming a victim
of cyberstalking.
In this paper, we propose Account Reachability Checker
(ARChecker) , a tool that shows the personal information accessi-
ble to a cyberstalker from a user’s profiles and messages on SNSs.
ARChecker focuses on users who have multiple accounts on dif-
ferent SNSs. As an example, we assume that a user has two ac-
counts : one on Facebook to write messages as a technical blogger,
and another on Twitter to write messages about his private life and
communicate with his friends. He believes that only few friends
knows that he owns these two accounts.
Imagine a case in which a user has trouble with customers from
an indiscreet comment he makes on Facebook, and the customers
happens to find his Twitter account. They may collect his per-
sonal information such as his home address, girl friend’s name,
and any compromising pictures to cause him mental distress. In
this way, revealing the user’s private account through his public ac-
count could lead to serious repercussions.
In this paper, we define a measure named Account Reachability
(AR), which calculates the possibility of revealing a private account
through a public account. To calculate AR, we define an attack
model, which uses profiles and messages of a public account to
find the private account, and we next define a formula to calculate
the AR. ARChecker calculates the AR from a Facebook account
to a Twitter account based on the definition. It simulates a simple
attack, which searches for Twitter accounts based on the profiles
of the Facebook account, and calculates the AR. For an intuitive
understanding of the result, ARChecker visualizes the result using
icons. In addition, it shows which keywords affects the value of the
AR.
The remainder of the paper is organized as follows. Section 2
describes the privacy risk of exposing a user’s multiple accounts
and related works. Section 3 describes our proposed tool named
ARChecker, and defines the attack model, and the measure of pri-
vacy risk named Account Reachability. Section 4, discusses the
effectiveness of our proposed tool and the privacy measure. Sec-
tion 5 introduces the variations of the attack based on the defined
attack model. Section 6 concludes the paper.
Figure 1: Stream identifying individual data.
2. PRIVACY RISK OF EXPOSURE OF A
USER’S MULTIPLE ACCOUNTS
2.1 Flow of Information Gathering
Cyberstalkers stalk or harass an individual, a group of individu-
als, or an organization via the Internet, which includes voyeurism,
making threats, identity theft, and defamation[18].Cyberstalking
could result from a trivial matter. For example, a user may be a
victim of a cyberstalker who falls in love with their picture, or an
indiscreet message on a SNS may incur the wrath of many people,
and cause the perpetrator to receive serious levels of harassment
from strangers. If cyberstalkers are not related to their victim in
real-life, they may gather private information about them from the
Web. Here, we introduce an actual cyberstalking incident that hap-
pened in Japan, to show the flow of gathering the victim’s private
information from SNSs, and to demonstrate the reason we focus on
cases involving victims with multiple SNS accounts.
This incident commenced on Twitter when the victim bragged
about his immoral activities in his office. Enraged on finding his
message, another user disseminated his message to some SNSs. As
punishment, many members of a web forum started cyberstalking
him to obtain his personal information, which in turn was exposed
on one forum after another. In the end, he had no option but to quit
his job.
Figure 1 shows the flow of how the victim’s private information
was collected.
1. The victim did not reveal his personal information on Twitter,
but he had another account on Mixi (Japanese social network
service). He used his Mixi account for communicating with
his friends in the real-world.
2. A stalker was able to locate his Mixi account because his
Twitter account was in the same name as his Mixi account .
3. The victim’s address, office name and room layout of his
house were extracted from his profiles on Mixi and subse-
quently exposed on a forum.
4. The victim uploaded movies, on his Mixi account enabling
the stalkers to expose a picture of his face on the forum.
5. A stalker found the website of his rock-band.
6. The victim had not used his real name on Twitter, but the
stalker found his name on the rock-band’s website.
As this case suggests, the cyberstalkers could glean little infor-
mation from his messages or profile on his Twitter account; how-
ever, the victim became vulnerable to attack when the cyberstalkers
identified his Mixi account, which revealed more of his personal
information. The followers of his Twitter account were mainly cy-
berspace acquaintances, so he was careful not to write any personal
information on his messages. On the other hand, his friends on his
Mixi account were his real friends, so he was less vigilant about
detailing his private experiences.
Alex Patriquin of Compete.com reports that most users have ac-
counts on several SNSs [1]. A Japanese government survey reports
that 60% of users have multiple SNS accounts. As a Forbes reporter
described in [2], users who have multiple accounts use their ac-
counts for different purposes, such as for sharing information with
business associates or for communicating with friends from high
school. Users generally write their profiles and messages accord-
ing to their purpose of the account.
Therefore, users tend to write different information in the mes-
sages and profiles of different accounts. For example, a friend of
the Forbes reporter uses Twitter to write articles related to her job
such as trend analysis of social marketing. On the other hand, she
uses her Facebook account for communicating with her friends and
family and she posts personal experiments. Therefore, aggregat-
ing private information from multiple accounts causes unintended
personal information leakage, as described in Section 2.1.
However, it is difficult to manage different personalities on cor-
responding accounts over long periods. A user, who always posts
messages that are related to his work, may post messages, which
offer glimpses into his daily life. In addition, it is a hard task to
keep track of what personal information was told to whom. For ex-
ample, imagine that a user shares his or her Facebook account with
only real friends when starting on Facebook, in time the user you
makes friends with a person who is not close, or a person whom
cannot be recalled in detail. It is, therefore, important to verify
that information shared on each account is different from other ac-
counts.
2.2 Related Works
The focus of this paper is on unintended personal information
leakage from multiple SNS accounts. The following two cases de-
scribesituations in which cyberstalkers obtain a victim’s private in-
formation from social network data:
• Obtaining anonymized social network graph data
The entire data of social networks are leveraged for data anal-
ysis such as marketing research, social research, advertise-
ments, and recommendations. Social network data is rep-
resented by a large graph, which expresses the relationship
between accounts with nodes and edges. To protect a user’s
personal information, the data should be anonymized before
publishing. However, some de-anonymization attacks have
been reported[12]. If an attacker succeeds in his attack, the
data will be used for collecting a victim’s personal infor-
mation. Several papers proposed privacy measures[18] for
social network data based on anonymity measures for mi-
crodata such as k-anonymity[16] and l-diversity[10]. In this
case, the data owner such as the social network service
provider anonymizes the data.
• Crawled data via an API or screen scraping
An attacker can collect information from the web pages of
online social networking services. In general, users spec-
ify their privacy settings that control the release of their pro-
files and messages. For example, Twitter provides a privacy
setting option for users to release their messages and list of
friends only to those followers authorized by the user. In this
case, each user should self-manage his personal information
and anonymize his account from unknown users, they should
apply anonymization techniques such as using pseudonyms
and sanitizing their identifiable information.
Focusing on the latter case, users should self-manage their per-
sonal information by keeping track of who knows the information
released in their messages and profiles, however, this is a heavy
task for SNS users. Many papers have highlighted the risk of un-
conscious information leakage from social network data. Refer-
ences [8] and [4] report that many SNS users do not specify pri-
vacy settings or, change the default privacy settings. Akcora et al.
[3] describes how the creation of a relationship without specifying
the appropriate privacy setting may expose the user to risk of un-
conscious release of personal data, and it proposes the risk model
for social networks. References[5],[17],[6] have also proposed the
risk model to aid the users’ understanding of potential privacy risks.
Even if a user is vigilant in setting the privacy settings of the SNS,
there remains a risk of an unconscious personal information leak-
age. Mislove et al. [11] remarked that some data analysis methods
based on friendship relations may infer the personal information of
an account even if the account does not release any privacy infor-
mation. Sadilek et al. [14] has proposed a technique for inferring
the user’s areas of residence and work from his friends’ action his-
tories.
These papers deal with the privacy concerns of a single SNS. On
the other hand, Danesh et al. [7] has modeled unintended personal
information leakage from multiple online social networks. It men-
tions the risk of aggregating the victim’s personal information from
different accounts, and it models the privacy risk of aggregate at-
tribute leakage. We also define the privacy risk of multiple SNS
accounts. However, we focus on whether an attacker can locate
the different accounts of victim. If the attacker cannot establish
the sole ownership of two different accounts, the user can avoid an
aggregate leakage attack.
3. ACCOUNT REACHABILITY CHECKER
Our proposed tool, ARChecker, checks whether a cyberstalker
can find a secret SNS account from the information of another SNS
account. In summary, it simulates the process for finding the tar-
get account and calculates the Account Reachability (AR) from the
result of the attack. We define the Account Reachability, which is
the possibility that a cyberstalker can find the secret SNS account
from the information in the given SNS account. Section 3.1 shows
the overview of ARChecker while Section 3.2 defines the Account
Reachability.
3.1 Overview
Figure 2 shows a screen shot image of ARChecker. It shows the
value of the Account Reachability, and for an intuitive understand-
Figure 2: Interface of the Account Reachability Checker.
ing of the value, it visualizes the result using human icons (Figure
2 3⃝). If the user’s icon is displayed much bigger or in a greater
number than other human icons, there is a high possibility of find-
ing the user’s secret account. In addition, it shows the words that
are included in the profiles or messages of messages of a given
SNS account and gives advice for protecting the target account.
The words are displayed using word clouds (Figure 2 4⃝). When
the user removes the words listed in the clouds from the messages
and profiles in a given account and they recheck the AR, the value
should decrease. Through repetition of this process of calculating
the AR and modifying the profiles (or messages), the possibility of
cyberstalkers finding the user’s secret account reduces.
The current version of ARChecker, supports Twitter and Face-
book, that is, it calculates the Account Reachability of a user’s
Twitter account from the information in the user’s Facebook ac-
count.
Figure 3 shows the process flow for checking AR. In this figure,
we assume that a user has a Facebook account (s1) and Twitter
account (s2). They use s1 for their work and s2 for chatting with
their real friends.
1. The user authenticates their Facebook account (s1) and Twit-
ter account (s2) with an authentication module.
2. The Profile collection module obtains the user’s profile data
from account s1.
3. The AR calculator module calculates the Account Reachabil-
ity from s1 to s2.
4. The Result Visualizer shows the result.
3.2 Attack Model
This section defines the attack model which is assumed in
ARChecker. The purpose of the attack model is to locate the vic-
tim’s secret account, s2. The attacker already knows the victim’s
account, s1. The relationship of the attacker’s account with s1 can
be considered as one of the following:
Figure 3: Process flow for checking AR
• (A) a friend in the real world : The attacker and s1 know each
other in real life.
• (B) a "friend" in the SNS : The attacker has a "friend (or
follower/followee)" relationship with s1, but they do not have
relationship in the real world.
• (C) no relationship : The attacker does not have relationship
with s1 either in the real world or on a SNS.
• (D) privileged account : The attacker has a privileged ac-
count on a SNS such as an administrator, allowing access to
s1’s personal information including profiles, messages, and
access log.
In this paper, we deal with (B) and (C). We model the processes
of attack as follows:
• Step1: Collecting Candidates :
An attacker searches for possible candidates of account s2
by using the information in account s1. Information about
account s1 is obtained through the attacker’s relationship be-
tween s1 and the attacker’s account. We assume that the at-
tacker searches for the candidates of s2 by issuing queries in
the SNS. In order to search for the candidates of s2, they ex-
tract some keywords from messages and profiles of s1. We
define a set of queries Q for searching the candidates of s2 as
follows:
Definition 1 (Queries for Collecting Candidates)
Let s1 be the account that is already known by the attacker,
and Let s1.pro f and s1.msg be messages and profiles of s1.
The function GenQueries(s1.pro f ,s1.msg) is implemented
by the attacker to extract queries for searching for s2. Let
Q be a set of queries that are extracted by GenQueries as
follows:
Q = {q|q ∈ GenQueries(s1.pro f ,s1.msg)}
Definition 2 (Candidate Account)
Let Cand(q) be a set of candidate accounts that are selected
by query q.
• Step2: Calculating Similarities : The attacker calculates
the similarities between each candidate account and s1. If
the attacker determines multiple candidates from Step1, they
can find s2 from the highest similarity score. The attacker
implements a calculation model based on the features of the
accounts. In its simplest form, the attacker can count the
number of attributes that have the same value in the two ac-
counts. If s2 and the candidates have many messages in the
SNS, the attacker can calculate the similarity of writing style
by using author estimation techniques [15]. The attacker can
also use the time and location of the messages to calculate the
similarities. Section 3.4 introduces a simple implementation
as an example, and Section 5 discusses advanced techniques
for calculating the similarities of users.
Definition 3 (Similarity Score Function)
Let Score(s1,c) be a function that is implemented by an at-
tacker in order to calculate the similarity between s1 and a
candidate c.
3.3 Account Reachability
Based on the attack model described in the previous section, we
define Account Reachability as follows.
Definition 4 (Account Reachability)
Let s1 and s2 be accounts which are used by user u; attacker a
already knows s1 but they do not know s2. Account Reachability
is the possibility that a finds account s2 from the information of
account s1.
Based on the process of the attack model, we define a formula
for calculating Account Reachability as follows:
Definition 5
Assuming an attacker selects candidates of s2 by using query q, that
is Cand(q). Account Reachability by q is calculated as:
AR(s1 → s2,q) =
Match(s2,Cand(q))∗
Score(s1,s2)
∑c∈Cand(q) Score(s1,c)
Match(s2) =
{
1 i f s2 ∈Cand(q)
0 else
.
Definition 6
Account Reachability AR(s1,s2) is calculated as:
AR(s1 → s2) = maxq⊆Q (AR(s1,s2,q))
Q = GenQueries(s1.pro f ,s1.msg).
In the formula, we define Account Reachability from s1 to s2 by
each query q, and it is calculated by the ratio of Score(s1,s2) to the
sum of similarity scores between s1 and the candidates. We define
AR as the maximum ratio among all queries in Q.
For example, if we assume that the attacker generates two queries
Q = {q1,q2} from the profiles and messages of s1. Using query
q1, allows them to select three candidates c1,c2,c3 and the simi-
larity scores with s1 are 10, 8 and 7, respectively. If c2 is s2, the
account reachability by q1 is 8/(10+8+7) = 0.32. Next, they se-
lects six candidates c1, ...,c6 and the similarity scores with s1 are
30,2,2,1,1 and 0, respectively. If c1 is s2, the account reachability
by q2 is 0.83. From these results, AR(s1,s2) is 0.83 by selecting the
highest value of AR(s1,s2,q).
If the number of candidates selected by q is small and s2 is in-
cluded in Cand(q), AR(s1,s2,q) generally becomes large. How-
ever, even if the similarity score of Score(s1,s2) is high, the value
may not be so high when the similarity scores between other candi-
dates and s1 are also high. On the other hand, even if many candi-
dates are selected by q, AR(s1,s2,q) becomes high when similarity
score Score(s1,s2) is particularly higher than others.
3.4 An Implementation of the Attack Model
In this section, we describe an implementation of the attack model
as an example. In the attack model, the attacker should imple-
ment three functions: GenQueries(s1 .pro f ,s1.msg), Cand(q) and
Score(s1,c). To implement them, we first assume the following
attack scenario.
Example Attack Scenario
The attacker uses a search engine to select the candidates of s2.
They first determine a set of keywords from the profiles of s1. Next,
they select a subset of keywords, which they use in the search engine
to collect the candidates of s2. They regard that the higher the
account is ranked in the search result page, the more probable it is
s2.
The attack scenario is simple and intuitive, and even an attacker
who has no technical skill for inferring can find candidates of s2.
Therefore, we consider that this scenario is suited for the first check
of AR.
Based on the scenario, we define the following functions:
• GenQueries(s1.pro f ,s1.msg):
Let KeywordSearch(ks,engine) be a function that searches
for accounts by using search engine engine and a set of key-
words ks. GenQueries outputs a set of functions Keywords
Search according to sets of keywords ks. To build a list
of keywords, it first extracts details including s1’s account
name, hometown, company name, academic records, and fa-
vorite things. Any subsets of the keywords are used as ks of
the function KeywordSearch.
• Cand(q)
It obtains the candidates of s2 by using query q that is Keyword
Search(ks,engine). In most search engines, it is possible to
specify the domain of target web pages. Therefore, it speci-
fies the domain URL of the SNS as a search option and out-
puts a set of accounts that are listed in the search engine result
page(SERP).
• Score(s1,c)
We define the score by using the rank in the SERP of the set
of keywords ks as:
Score(s1,c) =
1
Rank(ks,c)
, where Rank(ks,a) ={Ranking of c in the SERP of ks.}
In this example, we assume that the user has two accounts, one
is a Facebook account, s1 and the other is a Twitter account s2. The
attacker knows the Facebook account, s1, from which he obtains a
set of keywords {ayano, japan,ochanomizuuniversity}. From the
keywords, the attacker generates subsets of keywords { {ayano},
{ japan}, {ochanomizuuniversity},
{ayano, japan} , ..., {ayano, japan,ochanomizuuniversity} }. For
each set of keywords, the attacker searches for Twitter accounts us-
ing a search engine. When the attacker searches for accounts based
on the set of keywords {ayano, japan} using Google, s2 is ranked
1st among 5 accounts in the SERP, Score(s1,s2) is 1, and the Ac-
count Reachability by KeywordSearch(”Google”, {ayano, japan})
is calculated as:
AR(s1,s2,KeywordSearch(”Google”,{ayano, japan})) =
=
1
1+1/2+1/3+1/4+1/5
= 0.44
.
3.5 Visualization of the Result
ARChecker shows the value of Account Reachability to inform
the user the risk of exposing his personal information. However,
it is difficult to understand the risk only from the value of the Ac-
count Reachability. For example, in the example described in sec-
tion 3.4, the Account Reachability is 0.44. The user can not un-
derstand whether the value shows a dangerous status or not. In
addition, the user cannot understand how the value is calculated. If
the user’s status is dangerous, the user should modify his profiles
and messages so that they can reduce the risk. ARChecker gives
advice on how to decrease the value of the Account Reachability.
Therefore, ARChecker visualizes the value of Account Reach-
ability using human icons, as shown in Figure 2. In order to use
ARChecker, a user first logs onto two SNS sites (Figure 2 1⃝ ) ,
and presses the check button (Figure 2 2⃝) . After the system cal-
culates the Account Reachability, the value is displayed (see Figure
2 3⃝). In addition, in the bottom left area of Figure 2 4⃝, the value is
visualized by human icons, and the right area of Figure 2 5⃝ shows
the list of keywords which are used for searching the candidate’s
accounts.
All candidate users that are selected in step1 of the attack are
shown by human icons. The size of each icon depends on score
Score(s1,c), and the icons are arranged in descending order. No-
tice, that the user’s account is depicted by a colored icon, while all
other accounts are shown as gray-scaled icons. The value of Ac-
count Reachability is high when only a few candidates are found or
when Score(s1,s2) is much bigger than the other icons. The visu-
alization results show such situations. In Figure 2 4⃝, the biggest
icon is s2; all others are smaller. The value of Account Reachability
in this case is 38.8%. A user may first think the value is not so high.
However, the visualization result in Figure 2 4⃝ may lead the user
to realize that the value is higher than first thought. In this way, the
user can intuitively make sense of the value from the visualization
result.
In the bottom right area of Figure 2, the keywords are displayed
in the form of a "tag cloud". The size of a set of words (ks) depends
on the value of AR(s1,s2,KeywordSearch(engine,ks)). In this ex-
ample, the word "Ayano" is much bigger than the other words.
Since the large-sized words are the main factors affecting the value
of Account Reachability, the value may decrease when the user re-
moves those words from his profiles or messages. After modifying
the profiles or messages, the user can recheck the value of the Ac-
count Reachability to see how much the value has decreased. Fig-
ure 4 shows the interaction flow for reducing the risk of personal in-
formation leakage using ARchecker. We suggest using ARChecker
repeatedly until the value becomes sufficiently small.
4. EXPERIMENTS
In this section, we evaluate the effectiveness of Account Reach-
ability. For this purpose, we conducted the following two experi-
ments.
Figure 4: Interaction Flow of ARChecker
• Effective validation of Account Reachability
We evaluate whether the Account Reachability can detect
which private accounts can be found without the users’ in-
tent.
• User test of ARChecker
We evaluate the usefulness of ARChecker using question-
naires.
4.1 Effectiveness of Account Reachability
We calculate the values of account reachability from a Facebook
account to the corresponding Twitter account.
For this experiment, we collected 50 pairs of Twitter and Face-
book accounts that are used by the same user. We first categorize
the users into the following two categories:
• NotCare: The users of the category answer that they do not
care if a stranger identifies their Twitter account from their
Facebook account. There are 26 users in this category.
• NotWant: The users of this category answer that they do not
want their Twitter account to be identified from their Face-
book account. There are 24 users in this category.
We implement the attack model described in Section 3.4. In
the GenQueries(s1.pro f ,s1.msg) function, we extract the follow-
ing user attributes from the Facebook account: (1) Name, (2) Affil-
iation, (3) Birthday, and (4) Location. In the Cand(q) function, we
use Google to search for the corresponding Twitter account.
Figure 5 shows the values of Account Reachability. We list the
user’s numbers in the horizontal axes. The users from #1 to #26 are
NotCare category user, and the remainder are NotWant category
users.
The result shows that the Account Rreachabilities of the NotCare
category users are between 0% and 40%. The level of implemen-
tation applied in this experiment generally scores low values. For
example, a Twitter account of user #15 is ranked 1st among 5 users
in the SERP; therefore, the value is 44%. Although the value of
user #7 is only 17%, his Twitter account is ranked 2nd among ten
users. We regard that if the value is more than 10%, the user should
care. In addition, we should note that three NotWant users score
more than 10%. User #29 scores 100% because only his account is
listed up in the SERP by his Affiliation as keywords.Although the
other 20 users score 0%, it does not mean they are safe because the
level of implementation in the experiment is quite naive. The at-
tacker may use more advanced techniques. We should define more
level of implementation in order to make ARChecker more effec-
tive. Most of the users with an Account Reachability of 0% write
few attributes except their names on their Facebook profiles, which
are pseudonyms on their Twitter accounts. Therefore, ARChecker
cannot locate the corresponding Twitter account.
Figure 5: Values of Account Reachability
Figure 6: Keyword Sets which achieve the Maximum AR
Figure 6 shows keyword sets that get the maximum values among
any possible keywords. The horizontal axis shows the keywords
sets. For example, a user gets 100% by using their affiliations as a
keyword set. There are only 10 types of keywords sets in Figure 6.
Sets of three keywords are deemed unnecessary since they do not
produce a maximum value for any of the accounts. Sixteen users
produce th maximum value when they use their name as a keyword
because they write their name on their Twitter accounts, in their
profiles, or in their messages. In addition, seven users produce the
maximum value through a combination of their name and another
attribute.
4.2 User Test
We executed user tests to evaluate the usability of ARChecker.
The subject are six people (four women in their 20’s, one woman in
her 30’s, one man in his 20’s) who have both Facebook and Twit-
ter accounts. We asked them to use ARChecker and answer the
following questionnaire:
1. What was your received value of Account Reachability?
2. How did the result compare with your expectations?
3. Did the visualization result of the AR value help to under-
stand your privacy risk?
Figure 7: Results of the user questionnaire.
4. Did the word-cloud give you advice to modify your profiles
and messages to decrease your privacy risk?
5. Was the system easy to use?
The answers to the questions are shown in Figure 7.
Three of the users’ Account Reachability were 0% because they
do not release their user attributes in their Facebook account profile
or they restrict access to only their friends. However, users with an
Account Reachability of 100% post many items of indevidual data
in both accounts. In Question 3, all subjects answer affirmatively.
As we described in Section 4.2, the current ARChecker scores low
values; therefore, it is difficult to determine whether the user’s risk
is high. One subject whose score is a low 20% comments that she
felt the risk is higher than she first surmised on seeing the visual-
ization result. One subject gives a neutral response to question 4
commenting that it is difficult to understand where the displayed
words are written in her Facebook and Twitter accounts.
5. DISCUSSION
In this paper, we introduce a low levelimplementation of an at-
tack model. Our experiments show that Account Reachability is
generally higher than the user expects, even if we use the low lev-
elimplementation of the attack model. Nevertheless, attackers may
implement more sophisticated methods. In this section, we discuss
techniques to develop the similarity measures of two accounts in
step2 of the attack model.
The implementation described in section 3.4 relies solely on the
scores ranked in the search engine results page, as Score(s1,c); it
does not use the messages and profiles of the account to calculate
the similarity between account s1 and each candidate c.
If the candidate accounts have user attributes such as gender,
age, career and interests, it is possible to calculate the similarity
using the user’s attributes. However, some SNSs such as Twitter
and Flickr provide a free text style field for the user profile mak-
ing it difficult to extract the user’s attributes. User attribute estima-
tion techniques [13][11] estimate the user’s attributes from free text
styled profiles, messages, and user-user friendships.
Through calculation of the similarity of accounts using author-
ship identification techniques [15] we can further detect the features
of writing style using text mining techniques.
In addition, some SNSs such as Twitter and Flickr have a "geo-
tag" function, which allows users to automatically enter geophys-
ical information with a message or photos. Moreover, users often
write messages that include their current location. From such geo-
physical information, some researchers or attackers can estimate a
user’s home location [9].
Friendship relations can also be used for calculating account sim-
ilarity. Reference [12] proposed a technique for estimating "the
same user" link between two nodes in different social graphs. It
uses a link prediction kit to learn the patterns of already-known,
"same user" links to find the hidden links.
By implementing these advanced techniques into the attack model,
ARChecker can simulate various attacks to protect users from more
sophisticated cyberattacks.
6. CONCLUSIONS
Following incidents in which SNS users suffered at the hands of
Cyberstalkers, we considered a way to protect users from cyber-
stalker attacks. Cyberstalkers can access more information through
aggregate attributes on a user’s multiple accounts. Therefore, our
AccountReachabilityChecker has been designed to prevent personal
information being leaked due to plurality of associated SNS ac-
counts, and to ensure that it correctly recognizes the information
published on users’ accounts. The system very simply checks Ac-
count Reachability and shows the result and reasons for accessi-
bility to personal information. From the results, users can learn
how to protect themselves from privacy risk by taking certain mea-
sures. Furthermore, it is possible to check whether the measures
have been put into proper effect by repeated use. Improvement of
the user’s understanding over time will continue their use of SNSs
with suitable countermeasures.
A number of factors are used to determine the Account Reach-
ability. Further developments of the ARChecker will determine
more sophisticated methods to evaluate Account Reachability such
as information revealed in written posts. In addition, we will dis-
cuss the interface and implementation to protect exposure of per-
sonal information effectively.
7. ACKNOWLEDGEMENT
This work was supported JSPS KAKENHI
Grant Number 24700088.
8. REFERENCES
[1] Connecting the Social Graph: Member Overlap at OpenSocial and Facebook.
https://blog.compete.com/2007/11/12/
connecting-the-social-graph-member-overlap-at-opensocial-and-facebook/.
[2] Multiple Personalities And Social Media: The Many Faces of Me.
http://www.forbes.com/sites/meghancasserly/2011/01/26/
multiple-personalities-and-social-media-the-many-faces-of-me/.
[3] C. G. Akcora, B. Carminati, and E. Ferrari. Privacy in social networks: How risky is your social graph? In ICDE,
pages 9–19. IEEE Computer Society, 2012.
[4] D. Boyd and E. Hargittai. Facebook privacy settings: Who cares? First Monday, 15(8), 2010.
[5] B. Carminati, E. Ferrari, S. Morasca, and D. Taibi. A probability-based approach to modeling the risk of
unauthorized propagation of information in on-line social networks. In Proceedings of the first ACM conference
on Data and application security and privacy, CODASPY ’11, pages 51–62. ACM, 2011.
[6] A. Dubrawski, P. Sarkar, and L. Chen. Trade-offs between agility and reliability of predictions in dynamic social
networks used to model risk of microbial contamination of food. In Proceedings of the 2009 International
Conference on Advances in Social Network Analysis and Mining, ASONAM ’09, pages 125–130. IEEE
Computer Society, 2009.
[7] D. Irani, S. Webb, C. Pu, and K. Li. Modeling unintended personal-information leakage from multiple online
social networks. IEEE Internet Computing, 15(3):13–19, 2011.
[8] A. N. Joinson. Looking at, looking up or keeping up with people?: motives and use of facebook. In Proceedings
of the SIGCHI Conference on Human Factors in Computing Systems, CHI ’08, pages 1027–1036. ACM, 2008.
[9] R. Li, S. Wang, H. Deng, R. Wang, and K. C.-C. Chang. Towards social user profiling: unified and discriminative
influence model for inferring home locations. In Proceedings of the 18th ACM SIGKDD international conference
on Knowledge discovery and data mining, KDD ’12, pages 1023–1031. ACM, 2012.
[10] A. Machanavajjhala, D. Kifer, J. Gehrke, and M. Venkitasubramaniam. L-diversity: Privacy beyond k-anonymity.
ACM Trans. Knowl. Discov. Data, 1(1), 2007.
[11] A. Mislove, B. Viswanath, K. P. Gummadi, and P. Druschel. You are who you know: inferring user profiles in
online social networks. In Proceedings of the third ACM international conference on Web search and data
mining, WSDM ’10, pages 251–260. ACM, 2010.
[12] A. Narayanan and V. Shmatikov. De-anonymizing social networks. In Proceedings of the 2009 30th IEEE
Symposium on Security and Privacy, SP ’09, pages 173–187. IEEE Computer Society, 2009.
[13] D. Rao, D. Yarowsky, A. Shreevats, and M. Gupta. Classifying latent user attributes in twitter. In Proceedings of
the 2nd international workshop on Search and mining user-generated contents, SMUC ’10, pages 37–44. ACM,
2010.
[14] A. Sadilek, H. Kautz, and J. P. Bigham. Finding your friends and following them to where you are. In
Proceedings of the fifth ACM international conference on Web search and data mining, WSDM ’12, pages
723–732. ACM, 2012.
[15] E. Stamatatos. A survey of modern authorship attribution methods. J. Am. Soc. Inf. Sci. Technol., 60(3):538–556,
mar 2009.
[16] L. Sweeney. k-anonymity: a model for protecting privacy. Int. J. Uncertain. Fuzziness Knowl.-Based Syst.,
10(5):557–570, 2002.
[17] T. Wang, M. Srivatsa, D. Agrawal, and L. Liu. Modeling data flow in socio-information networks: a risk
estimation approach. In Proceedings of the 16th ACM symposium on Access control models and technologies,
SACMAT ’11, pages 113–122. ACM, 2011.
[18] E. Zheleva and L. Getoor. Privacy in social networks: a survey. In C. Aggarwal, editor, Social Network Data
Analytics, chapter 9, pages 247–276. Springer, March 2011.
