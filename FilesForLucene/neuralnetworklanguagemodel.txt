Authorship Attribution Using a Neural Network Language Model
Zhenhao Ge, Yufang Sun and Mark J.T. Smith
School of Electrical and Computer Engineering, Purdue University
465 Northwestern Ave, West Lafayette, Indiana, USA, 47907-2035
Emails: {zge, sun361, mjts}@purdue.edu, Phone: +1 (317) 457-9348
Abstract
In practice, training language models for individual authors
is often expensive because of limited data resources. In such
cases, Neural Network Language Models (NNLMs), gener-
ally outperform the traditional non-parametric N-gram mod-
els. Here we investigate the performance of a feed-forward
NNLM on an authorship attribution problem, with moderate
author set size and relatively limited data. We also consider
how the text topics impact performance. Compared with a
well-constructed N-gram baseline method with Kneser-Ney
smoothing, the proposed method achieves nearly 2.5% re-
duction in perplexity and increases author classification ac-
curacy by 3.43% on average, given as few as 5 test sen-
tences. The performance is very competitive with the state
of the art in terms of accuracy and demand on test data.
The source code, preprocessed datasets, a detailed descrip-
tion of the methodology and results are available at https:
//github.com/zge/authorship-attribution.
Introduction
Authorship attribution refers to identifying authors from
given texts by their unique textual features. It is challenging
since the author’s style may vary from time to time by topics,
mood and environment. Many methods have been explored
to address this problem, such as Latent Dirichlet Allocation
for topic modeling (Seroussi, Zukerman, and Bohnert 2011)
and Naive Bayes for text classification (Coyotl-Morales et
al. 2006). Regarding language modeling methods, there
is mixed advocacy for the conventional N-gram methods
(Kešelj et al. 2003) and methods using more compact and
distributed representations, like Neural Network Language
Models (NNLMs), which was claimed to capture semantics
better with limited training data (Bengio et al. 2003).
Most NNLM toolkits available (Mikolov et al. 2010) are
designed for recurrent NNLMs which are better for captur-
ing complex and longer text patterns and require more train-
ing data. In contrast, the feed-forward NNLM framework
we proposed is less computationally expensive and more
suitable for language modeling with limited data. It is devel-
oped in MATLAB with full network tuning functionalities.
The database we use is composed of transcripts of 16
video courses taken from Coursera, collected one sentence
per line into a text file for each course. To reduce the influ-
ence of “topic” on author/instructor classification, courses
were all selected from science and engineering fields, such
Copyright c© 2015, Association for the Advancement of Artificial
Intelligence (www.aaai.org). All rights reserved.
as Algorithm, DSP, Data Mining, IT, Machine Learning,
NLP, etc. There are 8000+ sentences/course and about 20
words/sentence on average. The vocabulary size of each
author varies from 3000 to 9000. After stemming with
Porter’s algorithm and pruning words with frequency less
than 1/100, 000, author vocabulary size is reduced to a range
from 1800 to 2700, with average size around 2000. Fig. 1
shows the vocabulary size for each course, under various
conditions and the database coverage with the most frequent
k words (k = 500, 1000, 2000) after stemming and pruning.
0 2 4 6 8 10 12 14 16
0
5000
10000
Dataset index (C)
Vo
ca
bu
lar
y s
ize
 (V
)
Vocabulary size for each dataset
 
 
Voriginal Vstemmed Vstemmed−pruned
0 2 4 6 8 10 12 14 16
0.8
0.85
0.9
0.95
1
Dataset index (C)
Da
tab
as
e C
ov
era
ge
 (D
C)
Database coverage from most frequent k words for each dataset
stemmed & pruned datasets, k = 500, 1000, 2000
 
 
DC2000 DC1000 DC500
Fig. 1: Vocabulary size and word coverage in various stages
Neural Network Language Model (NNLM)
Similar to N-gram methods, the NNLM is also used to an-
swer one of the fundamental questions in language model-
ing: predicting the best target wordW∗, given a context of
N − 1 words. The target word is typically the last word
within context size N . However, it theoretically can be in
any position. Fig. 2 demonstrates the structure of the pro-
posed NNLM with multinomial classification cost function:
C = −
∑
V
tj log yj , j ∈ V, (1)
where V is the vocabulary size, yj and tj are the final out-
put and the target label. This NNLM setup contains 4 types
of layers. The word layer contains N − 1 input words rep-
resented by V -dimensional index vectors with V − 1 “0”s
and one “1” positioned in a different location to differenti-
ate it from all other words. Words are then transformed to
their distributed representation and concatenated in the em-
bedding layer. Outputs from this layer forward propagate to
the hidden sigmoid layer, then softmax layer to predict the
probabilities of the possible target words. Weights/biases
between layers are initiated randomly and with zeros re-
spectively, and their error derivatives are computed through
backward propagation. The network is iteratively updated
with parameters, such as learning rate and momentum.
ar
X
iv
:1
60
2.
05
29
2v
1 
 [
cs
.C
L
] 
 1
7 
Fe
b 
20
16
Index of Context 
Word	 	
Index of Context 
Word	 	
Index of Context 
Word	1	
Index of Context 
Word	2	 ⋯ ⋯
Hidden Layer (sigmoid)
Output Layer (Softmax)
Embedding Layer
Representation 
of Word	
Representation 
of Word	
Representation 
of Word	1
Representation 
of Word	2 ⋯ ⋯
Index of Target Word	
, ∈ 1, ,
Fig. 2: A feed-forward NNLM setup (I: index, W: word,
N : number of context words, W : weight, b: bias)
In implementation, the processed text data for each course
are randomly split into training, validation, and test sets with
ratio 8:1:1. This segmentation is performed 10 times with
different randomization seeds, so the mean/variance of per-
formance of NNLMs can be measured later. We optimized
a 4-gram NNLM (predicting the 4th word using the previous
3) with mini-batch training through 10 to 20 epochs for each
course. The model parameters, such as number of nodes in
each layer, learning rate, and momentum are customized for
obtaining the best individual models.
Classification with Perplexity Measurement
Denote Wn1 as a word sequence (W1,W2, . . . ,WN ) and
P (Wn1 ) as the probability of Wn1 given a LM, perplexity
is an intrinsic measurement of the LM fitness defined by:
PP (Wn1 ) = P (Wn1 )−
1
n (2)
Using Markov chain theory, P (Wn1 ) can be approximated
by the probability of the closest N words P (Wnn−N+1), so
PP (Wn1 ) can be approximated by
PP (Wnn−N+1) = (
n∏
k=1
P (Wk|Wk−1k−N+1))
−1/n (3)
The mean perplexity of applying trained 4-gram NNLMs
to their corresponding test sets are 67.3± 2.4. This is lower
(better) than the traditional N-gram method (69.0±2.4 with
4-gram SRILM). The classification is performed by finding
the author with his/her NNLM that maximizes the accumu-
lative perplexity of the test sentences. By randomly select-
ing 1 to 20 test sentences from the test set, Fig. 3 shows
the 16-way classification accuracy using 3 methods, for one
particular course/instructor and for all courses on average.
There are 2 courses taught by the same instructor, intention-
ally added for investigating the topic impact on accuracy.
They are excluded when computing the average accuracy
in Fig. 3. Similarly, the accuracies for courses using two
methods with differing text lengths are compared in Fig. 4.
Both figures show the NNLM method is slightly better than
the SRI baselines at the 4-gram level. A classification con-
fusion matrix (not included due to space limits) was also
computed to show the similarity between authors. The re-
sults show higher confusion on similar courses, which indi-
cates the topic does impact accuracy. The NNLM has higher
confusion values than the SRI baseline on the two different
courses from the same instructor, so it is more biased toward
the author rather than the topic in that sense.
2 4 6 8 10 12 14 16 18 20
0.4
0.6
0.8
1
No. of sentences
Av
ge
rag
e A
ccu
rac
y
1−of−16 Classfication Accuracy vs. Text Length, Course ID: 3
 
 
unigram (SRI)
4gram (SRI)
4gram (NNLM)
2 4 6 8 10 12 14 16 18 20
0.6
0.7
0.8
0.9
1
No. of sentences
Co
urs
e A
vg
era
ge
 Ac
cu
rac
y
1−of−16 Course Average Classfication Accuracy vs. Text Length
 
 
4gram (SRI)
4gram (NNLM)
Fig. 3: Individual and mean accuracies vs. text length in
terms of the number of sentences
0 5 10 15
0.6
0.8
1
Dataset index (C)
Ac
cu
ra
cy
SRI 4−gram
 
 
10 sentences 5 sentences 1 sentence
0 5 10 15
0.6
0.8
1
Dataset index (C)
Ac
cu
ra
cy
NNLM 4−gram
 
 
Fig. 4: Accuracies at 3 stages differed by text length for 14
courses (2 courses from the same instructor are excluded)
.
Conclusion and Future Work
The NNLM-based work achieves promising results com-
pared with the N-gram baseline. The nearly perfect accura-
cies given 10+ test sentences are competitive with the state-
of-the-art, which achieved 95%+ accuracy on a similar au-
thor size (Coyotl-Morales et al. 2006), or 80%+ with tens of
authors and limited training data (Seroussi, Zukerman, and
Bohnert 2011). However, it may also indicate this dataset is
not sufficiently challenging, probably due to the training and
test data consistency and the topic distinction. In the future,
datasets with more authors can be used, for example, taken
from collections of books or transcribed speeches. We also
plan to integrate a nonlinear function optimization scheme
using the conjugate gradient (Rasmussen 2006), which auto-
matically selects the best training parameters and saves time
in model customization. To compensate for the relatively
small size of the training set, LMs may also be trained with
a group of authors and then adapted to the individuals.
References
[Bengio et al. 2003] Bengio, Y.; Ducharme, R.; Vincent, P.; and
Janvin, C. 2003. A neural probabilistic language model. The
Journal of Machine Learning Research 3:1137–1155.
[Coyotl-Morales et al. 2006] Coyotl-Morales, R. M.; Villaseñor-
Pineda, L.; Montes-y Gómez, M.; and Rosso, P. 2006. Authorship
attribution using word sequences. In Progress in Pattern Recogni-
tion, Image Analysis and Applications. Springer.
[Kešelj et al. 2003] Kešelj, V.; Peng, F.; Cercone, N.; and Thomas,
C. 2003. N-gram-based author profiles for authorship attribution.
In PACLING.
[Mikolov et al. 2010] Mikolov, T.; Karafiát, M.; Burget, L.; Cer-
nockỳ, J.; and Khudanpur, S. 2010. Recurrent neural network
based language model. In INTERSPEECH 2010.
[Rasmussen 2006] Rasmussen, C. E. 2006. Gaussian processes for
machine learning.
[Seroussi, Zukerman, and Bohnert 2011] Seroussi, Y.; Zukerman,
I.; and Bohnert, F. 2011. Authorship attribution with latent dirich-
let allocation. In CoNLL.
